searchNodes=[{"ref":"TestMatch.html","title":"TestMatch","type":"module","doc":"Top-level module used in &quot;&quot; post. This module is now standalone and finds the NeoSemantics modules from the github neo_semantics project. See the examples directory for some example scripts."},{"ref":"TestMatch.html#cypher/0","title":"TestMatch.cypher/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.rquery/0"},{"ref":"TestMatch.html#cypher/1","title":"TestMatch.cypher/1","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.rquery/1"},{"ref":"TestMatch.html#cypher!/0","title":"TestMatch.cypher!/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.rquery/0"},{"ref":"TestMatch.html#cypher!/1","title":"TestMatch.cypher!/1","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.rquery/1"},{"ref":"TestMatch.html#cypher_clear/0","title":"TestMatch.cypher_clear/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.clear/0"},{"ref":"TestMatch.html#cypher_dump/1","title":"TestMatch.cypher_dump/1","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.dump/1"},{"ref":"TestMatch.html#cypher_dump/2","title":"TestMatch.cypher_dump/2","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.dump/2"},{"ref":"TestMatch.html#cypher_init/0","title":"TestMatch.cypher_init/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.init/0"},{"ref":"TestMatch.html#cypher_reset/0","title":"TestMatch.cypher_reset/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.reset/0"},{"ref":"TestMatch.html#cypher_test/0","title":"TestMatch.cypher_test/0","type":"function","doc":"Delegates to TestMatch.LPG.Cypher.Client.test/0"},{"ref":"TestMatch.html#dbpedia_sparql_endpoint/0","title":"TestMatch.dbpedia_sparql_endpoint/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.dbpedia_sparql_endpoint/0"},{"ref":"TestMatch.html#export_rdf_by_id/2","title":"TestMatch.export_rdf_by_id/2","type":"function","doc":"Exports from Neo4j an LPG graph transformed into an RDF graph. The graph is centered on a node identified by node_id. This returns the full context unless an optional boolean arg exclude_context is passed as true which will exclude context if present. Examples iex&gt; TestMatch.export_rdf_by_id(1783) %TestMatch.Graph{ data: &quot;@prefix neovoc: &lt;neo4j://defaultvocabulary#&gt; .\\n@prefix neoind: &lt;neo4j://indiv#&gt; .\\n\\n\\nneoind:1783 a neovoc:Resource;\\n neovoc:ns0__creator neoind:1785;\\n neovoc:ns0__homepage neoind:1784;\\n neovoc:ns0__license neoind:1786;\\n neovoc:ns0__name &quot;Elixir&quot;;\\n neovoc:uri &quot;http://example.org/Elixir&quot; .\\n&quot;, file: &quot;1783.ttl&quot;, path: &quot;/Users/tony/Projects/github/tonyhammond/ex_mples/test_match/_build/dev/lib/test_graph/priv/rdf/graphs/1783.ttl&quot;, type: :rdf, uri: &quot;file:///Users/tony/Projects/github/tonyhammond/ex_mples/test_match/_build/dev/lib/test_graph/priv/rdf/graphs/1783.ttl&quot; } iex&gt; TestMatch.export_rdf_by_id(1783).data &quot;@prefix neovoc: &lt;neo4j://defaultvocabulary#&gt; .\\n@prefix neoind: &lt;neo4j://indiv#&gt; .\\n\\n\\nneoind:1783 a neovoc:Resource;\\n neovoc:ns0__creator neoind:1785;\\n neovoc:ns0__homepage neoind:1784;\\n neovoc:ns0__license neoind:1786;\\n neovoc:ns0__name &quot;Elixir&quot;;\\n neovoc:uri &quot;http://example.org/Elixir&quot; .\\n&quot;"},{"ref":"TestMatch.html#export_rdf_by_query/2","title":"TestMatch.export_rdf_by_query/2","type":"function","doc":"Exports from Neo4j an LPG graph transformed into an RDF graph. The graph is defined by the cypher query. Examples iex&gt; cypher = TestMatch.LPG.read_query(&quot;node1.cypher&quot;).data &quot;match (n) return n limit 1\\n&quot; iex&gt; cypher |&gt; TestMatch.export_rdf_by_query &quot;...&quot;"},{"ref":"TestMatch.html#export_rdf_by_query_on_rdf/2","title":"TestMatch.export_rdf_by_query_on_rdf/2","type":"function","doc":"Exports from Neo4j an LPG graph transformed into an RDF graph. The graph is defined by the cypher query. Examples iex&gt; cypher = TestMatch.LPG.read_query(&quot;temp.cypher&quot;).data &quot;match (n:Resource {uri:&#39;http://dataset/indiv#153&#39;}) return n\\n&quot; iex&gt; cypher |&gt; TestMatch.export_rdf_by_query_on_rdf &quot;...&quot;"},{"ref":"TestMatch.html#export_rdf_by_uri/2","title":"TestMatch.export_rdf_by_uri/2","type":"function","doc":"Exports from Neo4j an LPG graph transformed into an RDF graph. The graph is centered on a node identified by node_uri. This returns the full context unless an optional boolean arg exclude_context is passed as true which will exclude context if present. Examples iex&gt; TestMatch.export_rdf_by_uri(&quot;http://example.org/Elixir&quot;) %TestMatch.Graph{ data: &quot;@prefix neovoc: &lt;neo4j://vocabulary#&gt; .\\n\\n\\n&lt;http://example.org/Elixir&gt; &lt;http://example.org/creator&gt; &lt;http://dbpedia.org/resource/José_Valim&gt;;\\n &lt;http://example.org/homepage&gt; &lt;http://elixir-lang.org&gt;;\\n &lt;http://example.org/license&gt; &lt;http://dbpedia.org/resource/Apache_License&gt;;\\n &lt;http://example.org/name&gt; &quot;Elixir&quot; .\\n&quot;, file: &quot;http___example.org_Elixir.ttl&quot;, path: ... &lt;&gt; &quot;/test_match/priv/rdf/graphs/http___example.org_Elixir.ttl&quot;, type: :rdf, uri: &quot;file:///&quot; &lt;&gt; ... &lt;&gt; &quot;/test_match/priv/rdf/graphs/http___example.org_Elixir.ttl&quot; } iex&gt; TestMatch.export_rdf_by_uri(&quot;http://example.org/Elixir&quot;).data &quot;@prefix neovoc: &lt;neo4j://vocabulary#&gt; .\\n\\n\\n&lt;http://example.org/Elixir&gt; &lt;http://example.org/creator&gt; &lt;http://dbpedia.org/resource/José_Valim&gt;;\\n &lt;http://example.org/homepage&gt; &lt;http://elixir-lang.org&gt;;\\n &lt;http://example.org/license&gt; &lt;http://dbpedia.org/resource/Apache_License&gt;;\\n &lt;http://example.org/name&gt; &quot;Elixir&quot; .\\n&quot;"},{"ref":"TestMatch.html#import_rdf_from_graph/1","title":"TestMatch.import_rdf_from_graph/1","type":"function","doc":"Imports into Neo4j an LPG graph transformed from an RDF graph. Examples iex&gt; TestMatch.import_rdf_from_graph(&quot;elixir.ttl&quot;) [ %{ &quot;extraInfo&quot; =&gt; &quot;&quot;, &quot;namespaces&quot; =&gt; %{ &quot;http://example.org/&quot; =&gt; &quot;ns0&quot;, &quot;http://purl.org/dc/elements/1.1/&quot; =&gt; &quot;dc&quot;, &quot;http://purl.org/dc/terms/&quot; =&gt; &quot;dct&quot;, &quot;http://schema.org/&quot; =&gt; &quot;sch&quot;, &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; =&gt; &quot;rdf&quot;, &quot;http://www.w3.org/2000/01/rdf-schema#&quot; =&gt; &quot;rdfs&quot;, &quot;http://www.w3.org/2002/07/owl#&quot; =&gt; &quot;owl&quot;, &quot;http://www.w3.org/2004/02/skos/core#&quot; =&gt; &quot;skos&quot; }, &quot;terminationStatus&quot; =&gt; &quot;OK&quot;, &quot;triplesLoaded&quot; =&gt; 4 } ]"},{"ref":"TestMatch.html#import_rdf_from_query/1","title":"TestMatch.import_rdf_from_query/1","type":"function","doc":"Imports into Neo4j an LPG graph transformed from an RDF graph which was queried from a remote datastore using a SPARQL endpoint. Examples iex&gt; TestMatch.import_rdf_from_query(&quot;elixir.rq&quot;) [ %{ &quot;extraInfo&quot; =&gt; &quot;&quot;, &quot;namespaces&quot; =&gt; %{ &quot;http://example.org/&quot; =&gt; &quot;ns0&quot;, &quot;http://purl.org/dc/elements/1.1/&quot; =&gt; &quot;dc&quot;, &quot;http://purl.org/dc/terms/&quot; =&gt; &quot;dct&quot;, &quot;http://schema.org/&quot; =&gt; &quot;sch&quot;, &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; =&gt; &quot;rdf&quot;, &quot;http://www.w3.org/2000/01/rdf-schema#&quot; =&gt; &quot;rdfs&quot;, &quot;http://www.w3.org/2002/07/owl#&quot; =&gt; &quot;owl&quot;, &quot;http://www.w3.org/2004/02/skos/core#&quot; =&gt; &quot;skos&quot; }, &quot;terminationStatus&quot; =&gt; &quot;OK&quot;, &quot;triplesLoaded&quot; =&gt; 4 } ]"},{"ref":"TestMatch.html#lib_graph_from_cypher/0","title":"TestMatch.lib_graph_from_cypher/0","type":"function","doc":"Delegates to TestMatch.Lib.from_cypher/0"},{"ref":"TestMatch.html#lib_graph_from_cypher/1","title":"TestMatch.lib_graph_from_cypher/1","type":"function","doc":"Delegates to TestMatch.Lib.from_cypher/1"},{"ref":"TestMatch.html#lib_graph_from_cypher_with_properties/0","title":"TestMatch.lib_graph_from_cypher_with_properties/0","type":"function","doc":"Delegates to TestMatch.Lib.from_cypher_with_properties/0"},{"ref":"TestMatch.html#lib_graph_from_cypher_with_properties/1","title":"TestMatch.lib_graph_from_cypher_with_properties/1","type":"function","doc":"Delegates to TestMatch.Lib.from_cypher_with_properties/1"},{"ref":"TestMatch.html#lib_graph_from_sparql/0","title":"TestMatch.lib_graph_from_sparql/0","type":"function","doc":"Delegates to TestMatch.Lib.from_sparql/0"},{"ref":"TestMatch.html#lib_graph_from_sparql/1","title":"TestMatch.lib_graph_from_sparql/1","type":"function","doc":"Delegates to TestMatch.Lib.from_sparql/1"},{"ref":"TestMatch.html#list_dot_graph_images/0","title":"TestMatch.list_dot_graph_images/0","type":"function","doc":"Delegates to TestMatch.Lib.list_graph_images/0"},{"ref":"TestMatch.html#list_dot_graphs/0","title":"TestMatch.list_dot_graphs/0","type":"function","doc":"Delegates to TestMatch.Lib.list_graphs/0"},{"ref":"TestMatch.html#list_lib_graph_images/0","title":"TestMatch.list_lib_graph_images/0","type":"function","doc":"Delegates to TestMatch.Lib.list_graph_images/0"},{"ref":"TestMatch.html#list_lib_graphs/0","title":"TestMatch.list_lib_graphs/0","type":"function","doc":"Delegates to TestMatch.Lib.list_graphs/0"},{"ref":"TestMatch.html#list_lpg_graphs/0","title":"TestMatch.list_lpg_graphs/0","type":"function","doc":"Delegates to TestMatch.LPG.list_graphs/0"},{"ref":"TestMatch.html#list_lpg_queries/0","title":"TestMatch.list_lpg_queries/0","type":"function","doc":"Delegates to TestMatch.LPG.list_queries/0"},{"ref":"TestMatch.html#list_rdf_graphs/0","title":"TestMatch.list_rdf_graphs/0","type":"function","doc":"Delegates to TestMatch.RDF.list_graphs/0"},{"ref":"TestMatch.html#list_rdf_queries/0","title":"TestMatch.list_rdf_queries/0","type":"function","doc":"Delegates to TestMatch.RDF.list_queries/0"},{"ref":"TestMatch.html#list_sparql_services/0","title":"TestMatch.list_sparql_services/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.sparql_services/0"},{"ref":"TestMatch.html#local_sparql_endpoint/0","title":"TestMatch.local_sparql_endpoint/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.local_sparql_endpoint/0"},{"ref":"TestMatch.html#lpg_books/0","title":"TestMatch.lpg_books/0","type":"function","doc":"Delegates to TestMatch.LPG.books/0"},{"ref":"TestMatch.html#lpg_movies/0","title":"TestMatch.lpg_movies/0","type":"function","doc":"Delegates to TestMatch.LPG.movies/0"},{"ref":"TestMatch.html#rdf_books/0","title":"TestMatch.rdf_books/0","type":"function","doc":"Delegates to TestMatch.RDF.books/0"},{"ref":"TestMatch.html#read_dot_graph/0","title":"TestMatch.read_dot_graph/0","type":"function","doc":"Delegates to TestMatch.Lib.read_graph/0"},{"ref":"TestMatch.html#read_dot_graph/1","title":"TestMatch.read_dot_graph/1","type":"function","doc":"Delegates to TestMatch.Lib.read_graph/1"},{"ref":"TestMatch.html#read_lpg_graph/0","title":"TestMatch.read_lpg_graph/0","type":"function","doc":"Delegates to TestMatch.LPG.read_graph/0"},{"ref":"TestMatch.html#read_lpg_graph/1","title":"TestMatch.read_lpg_graph/1","type":"function","doc":"Delegates to TestMatch.LPG.read_graph/1"},{"ref":"TestMatch.html#read_lpg_query/0","title":"TestMatch.read_lpg_query/0","type":"function","doc":"Delegates to TestMatch.LPG.read_query/0"},{"ref":"TestMatch.html#read_lpg_query/1","title":"TestMatch.read_lpg_query/1","type":"function","doc":"Delegates to TestMatch.LPG.read_query/1"},{"ref":"TestMatch.html#read_rdf_graph/0","title":"TestMatch.read_rdf_graph/0","type":"function","doc":"Delegates to TestMatch.RDF.read_graph/0"},{"ref":"TestMatch.html#read_rdf_graph/1","title":"TestMatch.read_rdf_graph/1","type":"function","doc":"Delegates to TestMatch.RDF.read_graph/1"},{"ref":"TestMatch.html#read_rdf_query/0","title":"TestMatch.read_rdf_query/0","type":"function","doc":"Delegates to TestMatch.RDF.read_query/0"},{"ref":"TestMatch.html#read_rdf_query/1","title":"TestMatch.read_rdf_query/1","type":"function","doc":"Delegates to TestMatch.RDF.read_query/1"},{"ref":"TestMatch.html#sparql/0","title":"TestMatch.sparql/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/0"},{"ref":"TestMatch.html#sparql/1","title":"TestMatch.sparql/1","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/1"},{"ref":"TestMatch.html#sparql/2","title":"TestMatch.sparql/2","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/2"},{"ref":"TestMatch.html#sparql!/0","title":"TestMatch.sparql!/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/0"},{"ref":"TestMatch.html#sparql!/1","title":"TestMatch.sparql!/1","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/1"},{"ref":"TestMatch.html#sparql!/2","title":"TestMatch.sparql!/2","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.rquery/2"},{"ref":"TestMatch.html#sparql_endpoint/0","title":"TestMatch.sparql_endpoint/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.sparql_endpoint/0"},{"ref":"TestMatch.html#sparql_endpoint/1","title":"TestMatch.sparql_endpoint/1","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.sparql_endpoint/1"},{"ref":"TestMatch.html#sparql_query/0","title":"TestMatch.sparql_query/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.sparql_query/0"},{"ref":"TestMatch.html#sparql_query/1","title":"TestMatch.sparql_query/1","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.sparql_query/1"},{"ref":"TestMatch.html#wikidata_sparql_endpoint/0","title":"TestMatch.wikidata_sparql_endpoint/0","type":"function","doc":"Delegates to TestMatch.RDF.SPARQL.Client.wikidata_sparql_endpoint/0"},{"ref":"TestMatch.html#write_dot_graph/1","title":"TestMatch.write_dot_graph/1","type":"function","doc":"Delegates to TestMatch.Lib.write_graph/1"},{"ref":"TestMatch.html#write_dot_graph/2","title":"TestMatch.write_dot_graph/2","type":"function","doc":"Delegates to TestMatch.Lib.write_graph/2"},{"ref":"TestMatch.html#write_lib_graph/1","title":"TestMatch.write_lib_graph/1","type":"function","doc":"Delegates to TestMatch.Lib.write_lib_graph/1"},{"ref":"TestMatch.html#write_lib_graph/2","title":"TestMatch.write_lib_graph/2","type":"function","doc":"Delegates to TestMatch.Lib.write_lib_graph/2"},{"ref":"TestMatch.html#write_lpg_graph/1","title":"TestMatch.write_lpg_graph/1","type":"function","doc":"Delegates to TestMatch.LPG.write_graph/1"},{"ref":"TestMatch.html#write_lpg_graph/2","title":"TestMatch.write_lpg_graph/2","type":"function","doc":"Delegates to TestMatch.LPG.write_graph/2"},{"ref":"TestMatch.html#write_lpg_query/1","title":"TestMatch.write_lpg_query/1","type":"function","doc":"Delegates to TestMatch.LPG.write_query/1"},{"ref":"TestMatch.html#write_lpg_query/2","title":"TestMatch.write_lpg_query/2","type":"function","doc":"Delegates to TestMatch.LPG.write_query/2"},{"ref":"TestMatch.html#write_rdf_graph/1","title":"TestMatch.write_rdf_graph/1","type":"function","doc":"Delegates to TestMatch.RDF.write_graph/1"},{"ref":"TestMatch.html#write_rdf_graph/2","title":"TestMatch.write_rdf_graph/2","type":"function","doc":"Delegates to TestMatch.RDF.write_graph/2"},{"ref":"TestMatch.html#write_rdf_query/1","title":"TestMatch.write_rdf_query/1","type":"function","doc":"Delegates to TestMatch.RDF.write_query/1"},{"ref":"TestMatch.html#write_rdf_query/2","title":"TestMatch.write_rdf_query/2","type":"function","doc":"Delegates to TestMatch.RDF.write_query/2"},{"ref":"TestMatch.html#write_to_png/1","title":"TestMatch.write_to_png/1","type":"function","doc":"Delegates to TestMatch.Lib.to_png/1"},{"ref":"TestMatch.html#write_to_png/2","title":"TestMatch.write_to_png/2","type":"function","doc":"Delegates to TestMatch.Lib.to_png/2"},{"ref":"TestMatch.Graph.html","title":"TestMatch.Graph","type":"module","doc":"Module providing a struct for graphs. The %TestMatch.Graph{} struct is used to keep some related data fields together. One of the fields :type tracks whether this is a property graph (:lpg) or a semantic graph (:rdf). The other fields are straightforward data access fields: :data – graph_data :file – name of graph_file (within the graphs_dir) :path – absolute path of graph_file :uri – absolute URI of graph_file Examples iex&gt; data |&gt; TestMatch.Graph.new(&quot;temp.ttl&quot;, :rdf) %TestMatch.Graph{ data: &quot;&lt;GRAPH_DATA&gt;&quot; file: &quot;temp.ttl&quot;, path: &quot;.../test_match/priv/rdf/graphs/temp.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_match/priv/rdf/graphs/temp.ttl&quot; }"},{"ref":"TestMatch.Graph.html#new/3","title":"TestMatch.Graph.new/3","type":"function","doc":"Creates a %TestMatch.Graph{} struct. Examples iex&gt; data |&gt; TestMatch.Graph.new(&quot;books.ttl&quot;, :rdf) %TestMatch.Graph{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;books.ttl&quot;, path: &quot;.../test_match/priv/rdf/graphs/books.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_match/priv/rdf/graphs/books.ttl&quot; }"},{"ref":"TestMatch.Import.html","title":"TestMatch.Import","type":"module","doc":"Module for importing CSV data from priv/csv/."},{"ref":"TestMatch.Import.html#read_nodes_file/2","title":"TestMatch.Import.read_nodes_file/2","type":"function","doc":"Reads a CSV nodes_file and adds vertexes to the Graph g that is passed. The nodes_file is found at the @csv_dir location. Examples iex&gt; import TestMatch.Import TestMatch.Import iex&gt; g = Graph.new() #Graph&lt;type: directed, vertices: [], edges: []&gt; iex&gt; g = read_nodes_file(g, &quot;sw-nodes.csv&quot;) #Graph&lt;type: directed, vertices: [&quot;py4j&quot;, &quot;jpy-client&quot;, &quot;matplotlib&quot;, &quot;nbconvert&quot;, &quot;python-dateutil&quot;, &quot;six&quot;, &quot;jpy-console&quot;, &quot;pyspark&quot;, &quot;pytz&quot;, &quot;spacy&quot;, &quot;jupyter&quot;, &quot;pandas&quot;, &quot;ipykernel&quot;, &quot;jpy-core&quot;, &quot;numpy&quot;], edges: []&gt;"},{"ref":"TestMatch.Import.html#read_relationships_file/2","title":"TestMatch.Import.read_relationships_file/2","type":"function","doc":"Reads a CSV relationships_file and adds edges to the Graph g that is passed. The relationships_file is found at the @csv_dir location. Examples iex&gt; g = read_relationships_file(g, &quot;sw-relationships.csv&quot;) #Graph&lt;type: directed, vertices: [&quot;py4j&quot;, &quot;jpy-client&quot;, &quot;matplotlib&quot;, &quot;nbconvert&quot;, &quot;python-dateutil&quot;, &quot;six&quot;, &quot;jpy-console&quot;, &quot;pyspark&quot;, &quot;pytz&quot;, &quot;spacy&quot;, &quot;jupyter&quot;, &quot;pandas&quot;, &quot;ipykernel&quot;, &quot;jpy-core&quot;, &quot;numpy&quot;], edges: [&quot;jpy-client&quot; -[DEPENDS_ON]-&gt; &quot;jpy-core&quot;, &quot;matplotlib&quot; -[DEPENDS_ON]-&gt; &quot;python-dateutil&quot;, &quot;matplotlib&quot; -[DEPENDS_ON]-&gt; &quot;six&quot;, &quot;matplotlib&quot; -[DEPENDS_ON]-&gt; &quot;pytz&quot;, &quot;matplotlib&quot; -[DEPENDS_ON]-&gt; &quot;numpy&quot;, &quot;nbconvert&quot; -[DEPENDS_ON]-&gt; &quot;jpy-core&quot;, &quot;python-dateutil&quot; -[DEPENDS_ON]-&gt; &quot;six&quot;, &quot;jpy-console&quot; -[DEPENDS_ON]-&gt; &quot;jpy-client&quot;, &quot;jpy-console&quot; -[DEPENDS_ON]-&gt; &quot;ipykernel&quot;, &quot;pyspark&quot; -[DEPENDS_ON]-&gt; &quot;py4j&quot;, &quot;spacy&quot; -[DEPENDS_ON]-&gt; &quot;six&quot;, &quot;spacy&quot; -[DEPENDS_ON]-&gt; &quot;numpy&quot;, &quot;jupyter&quot; -[DEPENDS_ON]-&gt; &quot;nbconvert&quot;, &quot;jupyter&quot; -[DEPENDS_ON]-&gt; &quot;jpy-console&quot;, &quot;jupyter&quot; -[DEPENDS_ON]-&gt; &quot;ipykernel&quot;, &quot;pandas&quot; -[DEPENDS_ON]-&gt; &quot;python-dateutil&quot;, &quot;pandas&quot; -[DEPENDS_ON]-&gt; &quot;pytz&quot;, &quot;pandas&quot; -[DEPENDS_ON]-&gt; &quot;numpy&quot;]&gt;"},{"ref":"TestMatch.LPG.html","title":"TestMatch.LPG","type":"module","doc":"Module for reading and writing a library of LPG graphs and Cypher queries. The read_graph/1 and write_graph/2 functions allow for reading and writing RDF graphs to the project data repository. (Default file names are provided with the read_graph/0 and write_graph/1 forms.) The list_graphs/0 function lists graph file names. The read_query/1 and write_query/2 functions allow for reading and writing SPARQL queries to the project data repository. (Default file names are provided with the read_query/0 and write_query/1 forms.) The list_queries/0 function lists query file names. The books/0 and movies/0 functions return LPG example graphs. Some simple accessor functions are also available: graphs_dir/0, graph_file/0, temp_graph_file/0 queries_dir/0, query_file/0, temp_query_file/0"},{"ref":"TestMatch.LPG.html#books/0","title":"TestMatch.LPG.books/0","type":"function","doc":"Reads a Books graph from the graphs library. Examples iex&gt; books().data &quot;CREATE\\n(book:Book {\\n iri: \\&quot;urn:isbn:978-1-68050-252-7\\&quot;,\\n&quot;"},{"ref":"TestMatch.LPG.html#graph_file/0","title":"TestMatch.LPG.graph_file/0","type":"function","doc":"Returns the default LPG graph file. Examples iex&gt; TestMatch.LPG.graph_file() &quot;default.cypher&quot;"},{"ref":"TestMatch.LPG.html#graphs_dir/0","title":"TestMatch.LPG.graphs_dir/0","type":"function","doc":"Returns the LPG graphs directory."},{"ref":"TestMatch.LPG.html#list_graphs/0","title":"TestMatch.LPG.list_graphs/0","type":"function","doc":"Lists Cypher graphs in the LPG graphs library. Examples iex&gt; list_graphs() [&quot;movies.cypher&quot;, &quot;books.cypher&quot;, &quot;default.cypher&quot;]"},{"ref":"TestMatch.LPG.html#list_queries/0","title":"TestMatch.LPG.list_queries/0","type":"function","doc":"Lists Cypher queries in the LPG queries library. Examples iex&gt; list_queries() [&quot;relationship1.cypher&quot;, &quot;node1_and_relationships.cypher&quot;, &quot;path1.cypher&quot;, &quot;paths.cypher&quot;, &quot;relationship_ids.cypher&quot;, &quot;relationships.cypher&quot;, &quot;node_by_id.cypher&quot;, &quot;default.cypher&quot;, &quot;nodes.cypher&quot;, &quot;node_id1.cypher&quot;, &quot;node_ids.cypher&quot;, &quot;nodes_and_relationships.cypher&quot;, &quot;node1.cypher&quot;, &quot;relationship_by_id.cypher&quot;]"},{"ref":"TestMatch.LPG.html#movies/0","title":"TestMatch.LPG.movies/0","type":"function","doc":"Reads a Movies graph from the graphs library. Examples iex&gt; movies().data &quot;CREATE (TheMatrix:Movie {title:&#39;The Matrix&#39;, released:1999,...&quot;"},{"ref":"TestMatch.LPG.html#queries_dir/0","title":"TestMatch.LPG.queries_dir/0","type":"function","doc":"Returns the LPG queries directory."},{"ref":"TestMatch.LPG.html#query_file/0","title":"TestMatch.LPG.query_file/0","type":"function","doc":"Returns the default Cypher query file. Examples iex&gt; TestMatch.LPG.query_file() &quot;default.cypher&quot;"},{"ref":"TestMatch.LPG.html#read_graph/1","title":"TestMatch.LPG.read_graph/1","type":"function","doc":"Reads a user LPG graph from the LPG graphs library. Examples iex&gt; read_graph() %TestMatch.Graph{ data: &quot;//\\n// create nodes\\n//\\nCREATE\\n(book:Book {\\n...&quot; file: &quot;default.cypher&quot;, path: &quot;.../test_graph/priv/lpg/graphs/default.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/graphs/default.cypher&quot; } iex&gt; read_graph(&quot;books.cypher&quot;) %TestMatch.Graph{ data: &quot;//\\n// create nodes\\n//\\nCREATE\\n(book:Book {\\n...&quot; file: &quot;books.cypher&quot;, path: &quot;.../test_graph/priv/lpg/graphs/books.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/graphs/books.cypher&quot; }"},{"ref":"TestMatch.LPG.html#read_query/1","title":"TestMatch.LPG.read_query/1","type":"function","doc":"Reads a Cypher query from the LPG queries library. Examples iex&gt; read_query() %TestMatch.Query{ data: &quot;match (n) return n\\n&quot; file: &quot;nodes.cypher&quot;, path: &quot;.../test_graph/priv/lpg/queries/nodes.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/queries/nodes.cypher&quot; } iex&gt; read_query(&quot;nodes.cypher&quot;) %TestMatch.Query{ data: &quot;match (n) return n\\n&quot; file: &quot;nodes.cypher&quot;, path: &quot;.../test_graph/priv/lpg/queries/nodes.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/queries/nodes.cypher&quot; }"},{"ref":"TestMatch.LPG.html#temp_graph_file/0","title":"TestMatch.LPG.temp_graph_file/0","type":"function","doc":"Returns the temp LPG graph file for writing. Examples iex&gt; TestMatch.LPG.temp_graph_file() &quot;temp.cypher&quot;"},{"ref":"TestMatch.LPG.html#temp_query_file/0","title":"TestMatch.LPG.temp_query_file/0","type":"function","doc":"Returns the temp Cypher query file for writing. Examples iex&gt; TestMatch.LPG.temp_query_file() &quot;temp.cypher&quot;"},{"ref":"TestMatch.LPG.html#write_graph/2","title":"TestMatch.LPG.write_graph/2","type":"function","doc":"Writes a LPG graph to a user file in the LPG graphs library. Examples iex&gt; data |&gt; write_graph(&quot;my.cypher&quot;) %TestMatch.Graph{ data: &quot;//\\n// create nodes\\n//\\nCREATE\\n(book:Book {\\n...&quot; file: &quot;my.cypher&quot;, path: &quot;.../test_graph/priv/lpg/graphs/my.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/graphs/my.cypher&quot; }"},{"ref":"TestMatch.LPG.html#write_query/2","title":"TestMatch.LPG.write_query/2","type":"function","doc":"Writes a Cypher query to a file in the LPG queries library. Examples iex&gt; write_query(&quot;my.cypher&quot;) %TestMatch.Query{ data: &quot;match (n) return n\\n&quot; file: &quot;my.cypher&quot;, path: &quot;/test_graph/priv/lpg/queries/my.cypher&quot;, type: :lpg, uri: &quot;file:///.../test_graph/priv/lpg/queries/my.cypher&quot; }"},{"ref":"TestMatch.LPG.Cypher.Client.html","title":"TestMatch.LPG.Cypher.Client","type":"module","doc":"Module providing a simple library for querying LPG models in a Neo4j instance via Cypher."},{"ref":"TestMatch.LPG.Cypher.Client.html#clear/0","title":"TestMatch.LPG.Cypher.Client.clear/0","type":"function","doc":"Deletes all nodes and relationships in database. Examples iex&gt; Cypher_Client.clear() %{stats: %{&quot;nodes-deleted&quot; =&gt; 171, &quot;relationships-deleted&quot; =&gt; 253}, type: &quot;w&quot;}"},{"ref":"TestMatch.LPG.Cypher.Client.html#cypher_query/0","title":"TestMatch.LPG.Cypher.Client.cypher_query/0","type":"function","doc":"Returns a default Cypher query."},{"ref":"TestMatch.LPG.Cypher.Client.html#cypher_query/1","title":"TestMatch.LPG.Cypher.Client.cypher_query/1","type":"function","doc":"Returns a Cypher query from query_file."},{"ref":"TestMatch.LPG.Cypher.Client.html#dump/1","title":"TestMatch.LPG.Cypher.Client.dump/1","type":"function","doc":"Dumps all nodes and relationships in database. Examples iex(3)&gt; Cypher_Client.dump(&quot;nobelprizes.cypher&quot;) [ %{ &quot;batchSize&quot; =&gt; 20000, &quot;batches&quot; =&gt; 4, &quot;cleanupStatements&quot; =&gt; nil, &quot;cypherStatements&quot; =&gt; nil, &quot;file&quot; =&gt; &quot;.../test_match/priv/lpg/graphs/nobelprizes.cypher&quot;, &quot;format&quot; =&gt; &quot;cypher&quot;, &quot;nodeStatements&quot; =&gt; nil, &quot;nodes&quot; =&gt; 21027, &quot;properties&quot; =&gt; 49184, &quot;relationshipStatements&quot; =&gt; nil, &quot;relationships&quot; =&gt; 43267, &quot;rows&quot; =&gt; 64294, &quot;schemaStatements&quot; =&gt; nil, &quot;source&quot; =&gt; &quot;database: nodes(21027), rels(43267)&quot;, &quot;time&quot; =&gt; 949 } ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#dump/2","title":"TestMatch.LPG.Cypher.Client.dump/2","type":"function","doc":"Dumps all nodes and relationships in database. Examples iex(3)&gt; cypher_dump(&quot;match (n) return n limit 3&quot;, &quot;limit3.cypher&quot;) [ %{ &quot;batchSize&quot; =&gt; 20000, &quot;batches&quot; =&gt; 1, &quot;cleanupStatements&quot; =&gt; nil, &quot;cypherStatements&quot; =&gt; nil, &quot;file&quot; =&gt; &quot;.../test_match/priv/lpg/graphs/limit3.cypher&quot;, &quot;format&quot; =&gt; &quot;cypher&quot;, &quot;nodeStatements&quot; =&gt; nil, &quot;nodes&quot; =&gt; 3, &quot;properties&quot; =&gt; 3, &quot;relationshipStatements&quot; =&gt; nil, &quot;relationships&quot; =&gt; 0, &quot;rows&quot; =&gt; 3, &quot;schemaStatements&quot; =&gt; nil, &quot;source&quot; =&gt; &quot;statement: nodes(3), rels(0)&quot;, &quot;time&quot; =&gt; 1 } ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#init/0","title":"TestMatch.LPG.Cypher.Client.init/0","type":"function","doc":"Opens up a Bolt database connection with the app config. Examples iex&gt; Cypher_Client.init() [ socket: Bolt.Sips.Socket, port: 7687, hostname: &#39;localhost&#39;, retry_linear_backoff: [delay: 150, factor: 2, tries: 3], with_etls: false, ssl: false, timeout: 15000, max_overflow: 2, pool_size: 5, url: &quot;bolt://localhost:7687&quot;, basic_auth: [username: &quot;neo4j&quot;, password: &quot;neo4jtest&quot;] ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#node1/0","title":"TestMatch.LPG.Cypher.Client.node1/0","type":"function","doc":"Queries database for one node."},{"ref":"TestMatch.LPG.Cypher.Client.html#node1_and_relationships/0","title":"TestMatch.LPG.Cypher.Client.node1_and_relationships/0","type":"function","doc":"Queries database for one node and relationships."},{"ref":"TestMatch.LPG.Cypher.Client.html#node_by_id/1","title":"TestMatch.LPG.Cypher.Client.node_by_id/1","type":"function","doc":"Queries database for node by id. Examples iex&gt; Cypher_Client.node_by_id(311) [ %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 311, labels: [&quot;Book&quot;], properties: %{} } }, ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#node_id1/0","title":"TestMatch.LPG.Cypher.Client.node_id1/0","type":"function","doc":"Queries database for one node ID."},{"ref":"TestMatch.LPG.Cypher.Client.html#node_ids/1","title":"TestMatch.LPG.Cypher.Client.node_ids/1","type":"function","doc":"Queries database for limit number of node IDs. If no limit is given then all node IDs are retuned. Examples iex&gt; Cypher_Client.node_ids() [ %{&quot;id(n)&quot; =&gt; 1804}, %{&quot;id(n)&quot; =&gt; 1805}, %{&quot;id(n)&quot; =&gt; 1806}, %{&quot;id(n)&quot; =&gt; 1807}, %{&quot;id(n)&quot; =&gt; 6277} ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#nodes/1","title":"TestMatch.LPG.Cypher.Client.nodes/1","type":"function","doc":"Queries database for limit number of nodes. If no limit is given then all nodes are retuned. Examples iex&gt; Cypher_Client.nodes(2) [ %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 311, labels: [&quot;Book&quot;], properties: %{} } }, %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 312, labels: [&quot;Book&quot;], properties: %{} } } ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#nodes_and_relationships/1","title":"TestMatch.LPG.Cypher.Client.nodes_and_relationships/1","type":"function","doc":"Queries database for limit number of nodes and relationships. If no limit is given then all nodes and relationships are retuned. Examples iex&gt; Cypher_Client.nodes_and_relationships() [ %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 1546, labels: [&quot;Book&quot;], properties: %{ &quot;date&quot; =&gt; &quot;2018-03-14&quot;, &quot;format&quot; =&gt; &quot;Paper&quot;, &quot;iri&quot; =&gt; &quot;urn:isbn:978-1-68050-252-7&quot;, &quot;title&quot; =&gt; &quot;Adopting Elixir&quot; } }, &quot;r&quot; =&gt; %Bolt.Sips.Types.Relationship{ end: 1548, id: 1689, properties: %{&quot;role&quot; =&gt; &quot;second author&quot;}, start: 1546, type: &quot;AUTHORED_BY&quot; } }, ... ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#path1/0","title":"TestMatch.LPG.Cypher.Client.path1/0","type":"function","doc":"Queries database for one path."},{"ref":"TestMatch.LPG.Cypher.Client.html#paths/1","title":"TestMatch.LPG.Cypher.Client.paths/1","type":"function","doc":"Queries database for limit number of paths. If no limit is given then all paths are retuned. Examples iex&gt; Cypher_Client.paths() [ %{ &quot;p&quot; =&gt; %Bolt.Sips.Types.Path{ nodes: [ %Bolt.Sips.Types.Node{ id: 1548, labels: [&quot;Author&quot;], properties: %{&quot;iri&quot; =&gt; &quot;https://twitter.com/josevalim&quot;} }, %Bolt.Sips.Types.Node{ id: 1546, labels: [&quot;Book&quot;], properties: %{ &quot;date&quot; =&gt; &quot;2018-03-14&quot;, &quot;format&quot; =&gt; &quot;Paper&quot;, &quot;iri&quot; =&gt; &quot;urn:isbn:978-1-68050-252-7&quot;, &quot;title&quot; =&gt; &quot;Adopting Elixir&quot; } } ], relationships: [ %Bolt.Sips.Types.UnboundRelationship{ end: nil, id: 1689, properties: %{&quot;role&quot; =&gt; &quot;second author&quot;}, start: nil, type: &quot;AUTHORED_BY&quot; } ], sequence: [-1, 1] } }, ... ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#relationship1/0","title":"TestMatch.LPG.Cypher.Client.relationship1/0","type":"function","doc":"Queries database for one relationship."},{"ref":"TestMatch.LPG.Cypher.Client.html#relationship_by_id/1","title":"TestMatch.LPG.Cypher.Client.relationship_by_id/1","type":"function","doc":"Queries database for relationship by id. Examples iex&gt; Cypher_Client.relationship_by_id(9265) [ %{ &quot;r&quot; =&gt; %Bolt.Sips.Types.Relationship{ end: 1786, id: 9265, properties: %{}, start: 1783, type: &quot;ns0__license&quot; } } ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#relationship_id1/0","title":"TestMatch.LPG.Cypher.Client.relationship_id1/0","type":"function","doc":"Queries database for one relationship ID."},{"ref":"TestMatch.LPG.Cypher.Client.html#relationship_ids/1","title":"TestMatch.LPG.Cypher.Client.relationship_ids/1","type":"function","doc":"Queries database for limit number of relationship IDs. If no limit is given then all relationship IDs are retuned. Examples iex&gt; Cypher_Client.relationship_ids() [ %{&quot;id(n)&quot; =&gt; 1804}, %{&quot;id(n)&quot; =&gt; 1805}, %{&quot;id(n)&quot; =&gt; 1806}, %{&quot;id(n)&quot; =&gt; 1807}, %{&quot;id(n)&quot; =&gt; 6277} ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#relationships/1","title":"TestMatch.LPG.Cypher.Client.relationships/1","type":"function","doc":"Queries database for limit number of relationships. If no limit is given then all relationships are retuned. Examples iex&gt; Cypher_Client.relationships() [ %{ &quot;r&quot; =&gt; %Bolt.Sips.Types.Relationship{ end: 1548, id: 1689, properties: %{&quot;role&quot; =&gt; &quot;second author&quot;}, start: 1546, type: &quot;AUTHORED_BY&quot; } }, ... ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#reset/0","title":"TestMatch.LPG.Cypher.Client.reset/0","type":"function","doc":"Deletes all nodes and relationships in database. Examples iex&gt; Cypher_Client.reset() %{stats: %{&quot;nodes-deleted&quot; =&gt; 171, &quot;relationships-deleted&quot; =&gt; 253}, type: &quot;w&quot;}"},{"ref":"TestMatch.LPG.Cypher.Client.html#rquery/1","title":"TestMatch.LPG.Cypher.Client.rquery/1","type":"function","doc":"Queries Bolt connection with Cypher query. Examples iex&gt; Cypher_Client.rquery(&quot;match (n) return n limit 1&quot;) {:ok, [ %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 919, labels: [&quot;Resource&quot;], properties: %{ &quot;rdfs__label&quot; =&gt; &quot;Hello World&quot;, &quot;uri&quot; =&gt; &quot;http://dbpedia.org/resource/Hello_World&quot; } } } ]}"},{"ref":"TestMatch.LPG.Cypher.Client.html#rquery!/1","title":"TestMatch.LPG.Cypher.Client.rquery!/1","type":"function","doc":"The same as rquery/1 but raises a runtime error if it fails. Examples iex&gt; Cypher_Client.rquery!(&quot;match (n) return n limit 1&quot;) [ %{ &quot;n&quot; =&gt; %Bolt.Sips.Types.Node{ id: 919, labels: [&quot;Resource&quot;], properties: %{ &quot;rdfs__label&quot; =&gt; &quot;Hello World&quot;, &quot;uri&quot; =&gt; &quot;http://dbpedia.org/resource/Hello_World&quot; } } } ]"},{"ref":"TestMatch.LPG.Cypher.Client.html#test/0","title":"TestMatch.LPG.Cypher.Client.test/0","type":"function","doc":"Counts nodes, relationships and paths in database. Examples iex&gt; Cypher_Client.test() [%{&quot;nodes&quot; =&gt; 171, &quot;paths&quot; =&gt; 506, &quot;relationships&quot; =&gt; 253}]"},{"ref":"TestMatch.Lib.html","title":"TestMatch.Lib","type":"module","doc":"Module for reading and writing a library of libgraph graphs. The read_graph/1 and write_graph/2 functions allow for reading and writing RDF graphs to the project data repository. (Default file names are provided with the read_graph/0 and write_graph/1 forms.) The list_graphs/0 function lists graph file names. Some simple accessor functions are also available: graphs_dir/0, graph_file/0, temp_graph_file/0"},{"ref":"TestMatch.Lib.html#create_ets_tables/0","title":"TestMatch.Lib.create_ets_tables/0","type":"function","doc":"Create @node_table and @edge_table ETS tables."},{"ref":"TestMatch.Lib.html#cypher_query/0","title":"TestMatch.Lib.cypher_query/0","type":"function","doc":"Returns a default Cypher query."},{"ref":"TestMatch.Lib.html#from_cypher/1","title":"TestMatch.Lib.from_cypher/1","type":"function","doc":"Executes cypher_query and returns a graph."},{"ref":"TestMatch.Lib.html#from_cypher_with_properties/1","title":"TestMatch.Lib.from_cypher_with_properties/1","type":"function","doc":"Executes cypher_query and returns a graph with properties in ETS tables."},{"ref":"TestMatch.Lib.html#from_sparql/1","title":"TestMatch.Lib.from_sparql/1","type":"function","doc":"Executes sparql_query and returns a graph."},{"ref":"TestMatch.Lib.html#graph_file/0","title":"TestMatch.Lib.graph_file/0","type":"function","doc":"Returns a default Lib graph file. Examples iex&gt; TestMatch.Lib.graph_file() &quot;default.ttl&quot;"},{"ref":"TestMatch.Lib.html#graphs_dir/0","title":"TestMatch.Lib.graphs_dir/0","type":"function","doc":"Returns the Lib graphs directory."},{"ref":"TestMatch.Lib.html#list_graph_images/0","title":"TestMatch.Lib.list_graph_images/0","type":"function","doc":"Lists Lib graphs in the Lib graph images library. Examples iex&gt; list_graph_images() [&quot;tony.png&quot;, &quot;foo.png&quot;, &quot;foo1.png&quot;]"},{"ref":"TestMatch.Lib.html#list_graphs/0","title":"TestMatch.Lib.list_graphs/0","type":"function","doc":"Lists Lib graphs in the Lib graphs library. Examples iex&gt; list_graphs() [&quot;tony.dot&quot;, &quot;foo.dot&quot;, &quot;foo1.dot&quot;]"},{"ref":"TestMatch.Lib.html#read_graph/1","title":"TestMatch.Lib.read_graph/1","type":"function","doc":"Reads a Lib graph from the Lib graphs library. Examples iex&gt; read_graph() %TestMatch.Graph{ data: &quot;&lt;http://dbpedia.org/resource/Hello_World&gt;\\n...&quot; file: &quot;default.ttl&quot;, path: &quot;.../test_graph/priv/rdf/graphs/default.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/graphs/default.ttl&quot; } iex&gt; read_graph(&quot;books.ttl&quot;) %TestMatch.Graph{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;books.ttl&quot;, path: &quot;.../test_graph/priv/rdf/graphs/books.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/graphs/books.ttl&quot; }"},{"ref":"TestMatch.Lib.html#sparql_query/0","title":"TestMatch.Lib.sparql_query/0","type":"function","doc":"Returns a default SPARQL query."},{"ref":"TestMatch.Lib.html#temp_graph_file/0","title":"TestMatch.Lib.temp_graph_file/0","type":"function","doc":"Returns a temp Lib graph file for writing. Examples iex&gt; TestMatch.Lib.temp_graph_file() &quot;temp.ttl&quot;"},{"ref":"TestMatch.Lib.html#to_png/2","title":"TestMatch.Lib.to_png/2","type":"function","doc":"Writes a graph to a .png file in the Lib graph images library. The layout tool used is selected by the binary argument and is one of the following atoms: :dot − filter for drawing directed graphs :neato − filter for drawing undirected graphs :twopi − filter for radial layouts of graphs :circo − filter for circular layout of graphs :fdp − filter for drawing undirected graphs :sfdp − filter for drawing large undirected graphs :patchwork − filter for squarified tree maps :osage − filter for array-based layouts"},{"ref":"TestMatch.Lib.html#write_graph/2","title":"TestMatch.Lib.write_graph/2","type":"function","doc":"Writes a Lib graph to a file in the Lib graphs library. Examples iex&gt; data |&gt; write_graph(&quot;my.dot&quot;) %TestMatch.Graph{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;my.dot&quot;, path: &quot;/test_graph/priv/lib/graphs/my.dot&quot;, type: :lib, uri: &quot;file:///.../test_graph/priv/lib/graphs/my.dot&quot; }"},{"ref":"TestMatch.Lib.html#write_lib_graph/2","title":"TestMatch.Lib.write_lib_graph/2","type":"function","doc":"Writes a Lib graph to a file in the Lib graphs library."},{"ref":"TestMatch.Query.html","title":"TestMatch.Query","type":"module","doc":"Module providing a struct for queries. The %TestMatch.Query{} struct is used to keep some related data fields together. One of the fields :type tracks whether this is a property graph query (:lpg) or a semantic graph query (:rdf). The other fields are straightforward data access fields: :data – query_data :file – name of query_file (within the queries_dir) :path – absolute path of query_file :uri – absolute URI of query_file Examples iex&gt; data |&gt; TestMatch.Query.new(&quot;temp.rq&quot;, :rdf) %TestMatch.Query{ data: &quot;&lt;QUERY_DATA&gt;&quot; file: &quot;temp.rq&quot;, path: &quot;.../test_match/priv/rdf/queries/temp.rq&quot;, type: :rdf, uri: &quot;file:///.../test_match/priv/rdf/queries/temp.rq&quot; }"},{"ref":"TestMatch.Query.html#new/3","title":"TestMatch.Query.new/3","type":"function","doc":"Creates a %TestMatch.Query{} struct. Examples iex&gt; data |&gt; TestMatch.Query.new(&quot;books.rq&quot;, :rdf) %TestMatch.Query{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;books.rq&quot;, path: &quot;.../test_graph/priv/rdf/queries/books.rq&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/queries/books.rq&quot; }"},{"ref":"TestMatch.RDF.html","title":"TestMatch.RDF","type":"module","doc":"Module for reading and writing a library of RDF graphs and SPARQL queries. The read_graph/1 and write_graph/2 functions allow for reading and writing RDF graphs to the project data repository. (Default file names are provided with the read_graph/0 and write_graph/1 forms.) The list_graphs/0 function lists graph file names. The read_query/1 and write_query/2 functions allow for reading and writing SPARQL queries to the project data repository. (Default file names are provided with the read_query/0 and write_query/1 forms.) The list_queries/0 function lists query file names. Some simple accessor functions are also available: graphs_dir/0, graph_file/0, temp_graph_file/0 queries_dir/0, query_file/0, temp_query_file/0"},{"ref":"TestMatch.RDF.html#book/0","title":"TestMatch.RDF.book/0","type":"function","doc":"Creates a Book graph. Examples iex&gt; TestMatch.RDF.book() #RDF.Description{subject: ~I&lt;urn:isbn:978-1-68050-252-7&gt; ~I&lt;http://purl.org/dc/elements/1.1/creator&gt; ~I&lt;https://twitter.com/bgmarx&gt; ~I&lt;https://twitter.com/josevalim&gt; ~I&lt;https://twitter.com/redrapids&gt; ~I&lt;http://purl.org/dc/elements/1.1/date&gt; %RDF.Literal{value: ~D[2018-03-14], datatype: ~I&lt;http://www.w3.org/2001/XMLSchema#date&gt;} ~I&lt;http://purl.org/dc/elements/1.1/format&gt; ~L&quot;Paper&quot; ~I&lt;http://purl.org/dc/elements/1.1/publisher&gt; ~I&lt;https://pragprog.com/&gt; ~I&lt;http://purl.org/dc/elements/1.1/title&gt; ~L&quot;Adopting Elixir&quot;en ~I&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ~I&lt;http://purl.org/ontology/bibo/Book&gt;}"},{"ref":"TestMatch.RDF.html#books/0","title":"TestMatch.RDF.books/0","type":"function","doc":"Reads a Books graph from the graphs library. Examples iex&gt; books().data &quot;&quot;&lt;urn:isbn:978-1-68050-252-7&gt;\\n a &lt;http://purl.org/ontology/bibo/Book&gt; ;\\n ...&quot;"},{"ref":"TestMatch.RDF.html#graph_file/0","title":"TestMatch.RDF.graph_file/0","type":"function","doc":"Returns a default RDF graph file. Examples iex&gt; TestMatch.RDF.graph_file() &quot;default.ttl&quot;"},{"ref":"TestMatch.RDF.html#graphs_dir/0","title":"TestMatch.RDF.graphs_dir/0","type":"function","doc":"Returns the LPG graphs directory."},{"ref":"TestMatch.RDF.html#list_graphs/0","title":"TestMatch.RDF.list_graphs/0","type":"function","doc":"Lists RDF graphs in the RDF graphs library. Examples iex&gt; list_graphs() [&quot;books.ttl&quot;, &quot;urn_isbn_978-1-68050-252-7.ttl&quot;, &quot;http___dbpedia.org_resource_London.ttl&quot;, &quot;london100.ttl&quot;, &quot;london.ttl&quot;, &quot;nobelprizes.ttl&quot;, &quot;bibo.ttl&quot;, &quot;temp.ttl&quot;, &quot;http___example.org_Elixir.ttl&quot;, &quot;elixir.ttl&quot;, &quot;default.ttl&quot;, &quot;cypher.ttl&quot;, &quot;neo4j.ttl&quot;, &quot;hello.ttl&quot;]"},{"ref":"TestMatch.RDF.html#list_queries/0","title":"TestMatch.RDF.list_queries/0","type":"function","doc":"Lists SPARQL queries in the RDF queries library. Examples iex&gt; list_queries() [&quot;cypher.rq&quot;, &quot;london.rq&quot;, &quot;elixir.rq&quot;, &quot;default.rq&quot;, &quot;neo4j.rq&quot;, &quot;triples_by_uri.rq&quot;, &quot;triples.rq&quot;, &quot;hello.rq&quot;]"},{"ref":"TestMatch.RDF.html#queries_dir/0","title":"TestMatch.RDF.queries_dir/0","type":"function","doc":"Returns the LPG queries directory."},{"ref":"TestMatch.RDF.html#query_file/0","title":"TestMatch.RDF.query_file/0","type":"function","doc":"Returns a default SPARQL query file. Examples iex&gt; TestMatch.RDF.query_file() &quot;default.rq&quot;"},{"ref":"TestMatch.RDF.html#read_graph/1","title":"TestMatch.RDF.read_graph/1","type":"function","doc":"Reads a RDF graph from the RDF graphs library. Examples iex&gt; read_graph() %TestMatch.Graph{ data: &quot;&lt;http://dbpedia.org/resource/Hello_World&gt;\\n...&quot; file: &quot;default.ttl&quot;, path: &quot;.../test_graph/priv/rdf/graphs/default.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/graphs/default.ttl&quot; } iex&gt; read_graph(&quot;books.ttl&quot;) %TestMatch.Graph{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;books.ttl&quot;, path: &quot;.../test_graph/priv/rdf/graphs/books.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/graphs/books.ttl&quot; }"},{"ref":"TestMatch.RDF.html#read_query/1","title":"TestMatch.RDF.read_query/1","type":"function","doc":"Reads a SPARQL query from the RDF queries library. Examples iex&gt; read_query() %TestMatch.Query{ data: &quot;construct { ?s ?p ?o } where { ...&quot; file: &quot;books.rq&quot;, path: &quot;.../test_graph/priv/rdf/queries/books.rq&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/queries/books.rq&quot; } iex&gt; read_query(&quot;books.rq&quot;) %TestMatch.Query{ data: &quot;construct { ?s ?p ?o } where { ...&quot; file: &quot;books.rq&quot;, path: &quot;.../test_graph/priv/rdf/queries/books.rq&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/queries/books.rq&quot; }"},{"ref":"TestMatch.RDF.html#temp_graph_file/0","title":"TestMatch.RDF.temp_graph_file/0","type":"function","doc":"Returns a temp RDF graph file for writing. Examples iex&gt; TestMatch.RDF.temp_graph_file() &quot;temp.ttl&quot;"},{"ref":"TestMatch.RDF.html#temp_query_file/0","title":"TestMatch.RDF.temp_query_file/0","type":"function","doc":"Returns a temp SPARQL query file for writing. Examples iex&gt; TestMatch.RDF.temp_query_file() &quot;temp.rq&quot;"},{"ref":"TestMatch.RDF.html#write_graph/2","title":"TestMatch.RDF.write_graph/2","type":"function","doc":"Writes a RDF graph to a file in the RDF graphs library. Examples iex&gt; data |&gt; write_graph(&quot;my.ttl&quot;) %TestMatch.Graph{ data: &quot;@prefix bibo: &lt;http://purl.org/ontology/bibo/&gt; \\n...&quot; file: &quot;my.ttl&quot;, path: &quot;/test_graph/priv/rdf/graphs/my.ttl&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/graphs/my.ttl&quot; }"},{"ref":"TestMatch.RDF.html#write_query/2","title":"TestMatch.RDF.write_query/2","type":"function","doc":"Writes a SPARQL query to a file in the RDF queries library. Examples iex&gt; write_query(&quot;my.rq&quot;) %TestMatch.Query{ data: &quot;construct { ?s ?p ?o } where { ...&quot; file: &quot;my.rq&quot;, path: &quot;.../test_graph/priv/rdf/queries/my.rq&quot;, type: :rdf, uri: &quot;file:///.../test_graph/priv/rdf/queries/my.rq&quot; }"},{"ref":"TestMatch.RDF.BIBO.html","title":"TestMatch.RDF.BIBO","type":"module","doc":""},{"ref":"TestMatch.RDF.BIBO.html#__iris__/0","title":"TestMatch.RDF.BIBO.__iris__/0","type":"function","doc":"Returns all known IRIs of the vocabulary."},{"ref":"TestMatch.RDF.DC.html","title":"TestMatch.RDF.DC","type":"module","doc":""},{"ref":"TestMatch.RDF.DC.html#__iris__/0","title":"TestMatch.RDF.DC.__iris__/0","type":"function","doc":"Returns all known IRIs of the vocabulary."},{"ref":"TestMatch.RDF.DC.html#creator/0","title":"TestMatch.RDF.DC.creator/0","type":"function","doc":"http://purl.org/dc/elements/1.1/creator"},{"ref":"TestMatch.RDF.DC.html#creator/2","title":"TestMatch.RDF.DC.creator/2","type":"function","doc":"RDF.Description builder for creator/0"},{"ref":"TestMatch.RDF.DC.html#date/0","title":"TestMatch.RDF.DC.date/0","type":"function","doc":"http://purl.org/dc/elements/1.1/date"},{"ref":"TestMatch.RDF.DC.html#date/2","title":"TestMatch.RDF.DC.date/2","type":"function","doc":"RDF.Description builder for date/0"},{"ref":"TestMatch.RDF.DC.html#format/0","title":"TestMatch.RDF.DC.format/0","type":"function","doc":"http://purl.org/dc/elements/1.1/format"},{"ref":"TestMatch.RDF.DC.html#format/2","title":"TestMatch.RDF.DC.format/2","type":"function","doc":"RDF.Description builder for format/0"},{"ref":"TestMatch.RDF.DC.html#publisher/0","title":"TestMatch.RDF.DC.publisher/0","type":"function","doc":"http://purl.org/dc/elements/1.1/publisher"},{"ref":"TestMatch.RDF.DC.html#publisher/2","title":"TestMatch.RDF.DC.publisher/2","type":"function","doc":"RDF.Description builder for publisher/0"},{"ref":"TestMatch.RDF.DC.html#title/0","title":"TestMatch.RDF.DC.title/0","type":"function","doc":"http://purl.org/dc/elements/1.1/title"},{"ref":"TestMatch.RDF.DC.html#title/2","title":"TestMatch.RDF.DC.title/2","type":"function","doc":"RDF.Description builder for title/0"},{"ref":"TestMatch.RDF.SPARQL.Client.html","title":"TestMatch.RDF.SPARQL.Client","type":"module","doc":"Module providing simple wrapper functions for the SPARQL.Client module."},{"ref":"TestMatch.RDF.SPARQL.Client.html#dbpedia_sparql_endpoint/0","title":"TestMatch.RDF.SPARQL.Client.dbpedia_sparql_endpoint/0","type":"function","doc":"Sets DBpedia SPARQL endpoint. Examples iex&gt; dbpedia_sparql_endpoint() &quot;http://dbpedia.org/sparql&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#local_sparql_endpoint/0","title":"TestMatch.RDF.SPARQL.Client.local_sparql_endpoint/0","type":"function","doc":"Sets local SPARQL endpoint. Examples iex&gt; local_sparql_endpoint() &quot;http://localhost:7200/repositories/test-graph&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#rquery/2","title":"TestMatch.RDF.SPARQL.Client.rquery/2","type":"function","doc":"Queries a SPARQL endpoint with a SPARQL query. Examples iex&gt; sparql_endpoint &quot;http://localhost:7200/repositories/test-graph&quot; iex&gt; sparql_endpoint(:sparql_dbpedia) &quot;http://dbpedia.org/sparql&quot; iex&gt; read_rdf_query(&quot;hello.rq&quot;).data |&gt; SPARQL_Client.rquery() {:ok, #RDF.Graph{name: nil ~I&lt;http://dbpedia.org/resource/Hello_World&gt; ~I&lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ~L&quot;Hello World&quot;en}}"},{"ref":"TestMatch.RDF.SPARQL.Client.html#rquery!/2","title":"TestMatch.RDF.SPARQL.Client.rquery!/2","type":"function","doc":"The same as rquery but raises a runtime error if it fails. Examples iex&gt; sparql_endpoint &quot;http://dbpedia.org/sparql&quot; iex&gt; read_rdf_query(&quot;hello.rq&quot;).data |&gt; SPARQL_Client.rquery() #RDF.Graph{name: nil ~I&lt;http://dbpedia.org/resource/Hello_World&gt; ~I&lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ~L&quot;Hello World&quot;en}"},{"ref":"TestMatch.RDF.SPARQL.Client.html#sparql_endpoint/0","title":"TestMatch.RDF.SPARQL.Client.sparql_endpoint/0","type":"function","doc":"Returns default SPARQL endpoint. Examples iex&gt; sparql_endpoint() &quot;http://localhost:7200/repositories/test-graph&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#sparql_endpoint/1","title":"TestMatch.RDF.SPARQL.Client.sparql_endpoint/1","type":"function","doc":"Sets default SPARQL endpoint. Examples iex&gt; sparql_endpoint(:sparql_dbpedia) &quot;http://dbpedia.org/sparql&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#sparql_query/0","title":"TestMatch.RDF.SPARQL.Client.sparql_query/0","type":"function","doc":"Returns default SPARQL query. Examples iex&gt; sparql_query() &quot;construct\\n{ ?s ?p ?o }\\nwhere {\\n ?s ?p ?o\\n} limit 1\\n&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#sparql_query/1","title":"TestMatch.RDF.SPARQL.Client.sparql_query/1","type":"function","doc":"Returns a SPARQL query from query_file. Examples iex&gt; list_rdf_queries [&quot;cypher.rq&quot;, &quot;london.rq&quot;, &quot;elixir.rq&quot;, &quot;default.rq&quot;, &quot;neo4j.rq&quot;, &quot;triples_by_uri.rq&quot;, &quot;triples.rq&quot;, &quot;hello.rq&quot;] iex&gt; sparql_query(&quot;hello.rq&quot;) &quot;construct\\n{ ?s ?p ?o }\\nwhere {\\n bind (&lt;http://dbpedia.org/resource/Hello_World&gt; as ?s)\\n ?s ?p ?o\\n filter (isLiteral(?o) &amp;&amp; langMatches(lang(?o), \\&quot;en\\&quot;))\\n}\\n&quot;"},{"ref":"TestMatch.RDF.SPARQL.Client.html#sparql_services/0","title":"TestMatch.RDF.SPARQL.Client.sparql_services/0","type":"function","doc":"Returns SPARQL services. Examples iex&gt; list_sparql_services() [:sparql_dbpedia, :sparql_local, :sparql_wikidata]"},{"ref":"TestMatch.RDF.SPARQL.Client.html#triples/1","title":"TestMatch.RDF.SPARQL.Client.triples/1","type":"function","doc":""},{"ref":"TestMatch.RDF.SPARQL.Client.html#triples_by_uri/2","title":"TestMatch.RDF.SPARQL.Client.triples_by_uri/2","type":"function","doc":""},{"ref":"TestMatch.RDF.SPARQL.Client.html#wikidata_sparql_endpoint/0","title":"TestMatch.RDF.SPARQL.Client.wikidata_sparql_endpoint/0","type":"function","doc":"Sets Wikidata SPARQL endpoint. Examples iex&gt; wikidata_sparql_endpoint() &quot;https://query.wikidata.org/bigdata/namespace/wdq/sparql&quot;"},{"ref":"TestMatch.Utils.html","title":"TestMatch.Utils","type":"module","doc":"Module providing helper functions."},{"ref":"TestMatch.Utils.html#help/0","title":"TestMatch.Utils.help/0","type":"function","doc":"Lists toplevel module&#39;s functions. Examples iex&gt; help [ export_rdf_by_id: 1, export_rdf_by_id: 2, export_rdf_by_query: 2, export_rdf_by_uri: 1, export_rdf_by_uri: 2, import_rdf_from_graph: 0, import_rdf_from_graph: 1, import_rdf_from_query: 0, import_rdf_from_query: 1 ] :ok"},{"ref":"TestMatch.Utils.html#help/1","title":"TestMatch.Utils.help/1","type":"function","doc":"Lists named module&#39;s functions. Examples iex&gt; help NeoSemantics [ import_jsonld: 2, import_jsonld!: 2, import_ntriples: 2, import_ntriples!: 2, import_rdf: 3, import_rdf!: 3, import_rdfxml: 2, import_rdfxml!: 2, import_trig: 2, import_trig!: 2, import_turtle: 2, import_turtle!: 2, lite_onto_import: 3, lite_onto_import!: 3, preview_rdf: 3, preview_rdf!: 3, preview_rdf_snippet: 3, preview_rdf_snippet!: 3, stream_rdf: 3, stream_rdf!: 3 ] :ok"},{"ref":"TestMatch.Utils.html#parse/1","title":"TestMatch.Utils.parse/1","type":"function","doc":"Parses a graphgist to return a Cypher graph. Examples iex&gt; parse(read_graphgist()) &quot;CREATE\\n (a:Person {name: &#39;Alice&#39;}),\\n (b:Person {name: &#39;Bob&#39;}),\\n&quot; &lt;&gt; ..."},{"ref":"TestMatch.Utils.html#read_graphgist/1","title":"TestMatch.Utils.read_graphgist/1","type":"function","doc":"Reads a graphgist from the graphgists library. Examples iex&gt; read_graphgist(&quot;template.adoc&quot;) &quot;= REPLACEME: TITLE OF YOUR GRAPHGIST\\n:neo4j-version: 2.3.0\\n:author:&quot; &lt;&gt; ..."}]